[{"body":"These docs consists the following parts:\nInstallation Configuration Installation ","link":"https://cooperspencer.github.io/gickup-documentation/docs/","section":"docs","title":"Getting started"},{"body":"You can get gickup on various ways:\nBinary Docker Compile it yourself Methods to install ","link":"https://cooperspencer.github.io/gickup-documentation/docs/installation/","section":"docs","title":"Installation"},{"body":"Binary Download the latest release for your OS and architecture from Github and unpack it. Alternatively, you can copy the gickup binary to a directory from your $PATH variable, to use it globally.\nLinux/Mac 1./gickup conf.yml Windows 1gickup.exe conf.yml Docker You can grab the latest version of gickup from Github or Docker.\nPure Docker 1docker pull buddyspencer/gickup 2docker run -d -v /path/to/conf.yml:/gickup/conf.yml buddyspencer/gickup Docker Compose If you prefer to use docker compose, grab the docker-compose.yml from the repository.\n1docker compose up -d Compile it yourself If you want to use the latest version of the main branch, you can also compile it yourself.\nPrerequisits:\ngit go 1git clone https://github.com/cooperspencer/gickup 2cd gickup 3go build . ","link":"https://cooperspencer.github.io/gickup-documentation/docs/installation/installation/","section":"docs","title":"Methods to install"},{"body":"It shows how to configure gickup to clone your repositories\nSource Destination Miscellaneous Configure source ","link":"https://cooperspencer.github.io/gickup-documentation/docs/configuration/","section":"docs","title":"Configuration"},{"body":"Gickup supports various code hosters:\nGithub Gitea Gogs Gitlab Onedev Sourcehut But you can also backup every repository that is not hosted on any of those hosters whith the Any key.\nGithub ","link":"https://cooperspencer.github.io/gickup-documentation/docs/configuration/source/","section":"docs","title":"Source"},{"body":" 1 github: 2 - token: some-token 3 token_file: token.txt 4 user: some-user 5 username: your-user 6 password: your-password 7 ssh: true 8 sshkey: /path/to/key 9 exclude: # this excludes the repos \u0026#34;foo\u0026#34; and \u0026#34;bar\u0026#34; 10 - foo 11 - bar 12 include: # this includes the repo \u0026#34;foobar\u0026#34; 13 - foobar 14 excludeorgs: # this excludes repos from the organizations \u0026#34;foo\u0026#34; and \u0026#34;bar\u0026#34; 15 - foo 16 - bar 17 includeorgs: # this includes repos from the organizations \u0026#34;foo1\u0026#34; and \u0026#34;bar1\u0026#34; 18 - foo1 19 - bar1 20 wiki: true 21 starred: true 22 filter: 23 lastactivity: 1y 24 stars: 100 25 excludearchived: true 26 excludeforks: true 27 languages: 28 - go 29 - whatever token: your github token. You don't need one, if you backup only public repositories, although it is possible to hit the limit for the Github-API. It can also be an environment variable. token_file: alternatively, specify the token in a file, relative to current working directory when executed. user: the user you want to clone the repositories from. if you want to get everything from your user, leave out the user parameter and just use the token. for the clone process, either use:\nusername + password sshkey token nothing, if you only clone public repositories username: user that will be used for the clone process. password: password for said user. ssh: boolean value if the clone should be done via ssh. sshkey: if empty, it uses your home directories' .ssh/id_rsa. exclude: you can exclude repositories. include: only clone those specific repositories. excludeorgs: leave out specific organizations of the user. includeorgs: only clone those specific organizations repositories. wiki: also clone the wikis of the repositories. starred: also clone the starred repositories of the user. filter: lastactivity: only repos that were active in this time frame are cloned (y, M, d, h, m, s) stars: clone repos with at least x stars. excludearchived: do not clone archived repos. excludeforks: do not clone forked repos languages: only clone repos of said languages. ","link":"https://cooperspencer.github.io/gickup-documentation/docs/configuration/source/github/","section":"docs","title":"Github"},{"body":" 1 gitea: 2 - token: some-token 3 token_file: token.txt 4 url: http(s)://url-to-gitea 5 user: some-user 6 username: your-user 7 password: your-password 8 ssh: true 9 sshkey: /path/to/key 10 exclude: # this excludes the repos \u0026#34;foo\u0026#34; and \u0026#34;bar\u0026#34; 11 - foo 12 - bar 13 include: # this includes the repo \u0026#34;foobar\u0026#34; 14 - foobar 15 excludeorgs: # this excludes repos from the organizations \u0026#34;foo\u0026#34; and \u0026#34;bar\u0026#34; 16 - foo 17 - bar 18 includeorgs: # this includes repos from the organizations \u0026#34;foo1\u0026#34; and \u0026#34;bar1\u0026#34; 19 - foo1 20 - bar1 21 wiki: true 22 starred: true 23 filter: 24 lastactivity: 1y 25 stars: 100 26 excludearchived: true 27 excludeforks: true 28 languages: 29 - go 30 - whatever token: your gitea token. You don't need one, if you backup only public repositories. It can also be an environment variable. token_file: alternatively, specify the token in a file, relative to current working directory when executed. url: if empty, https://gitea.com is used. user: the user you want to clone the repositories from. if you want to get everything from your user, leave out the user parameter and just use the token. for the clone process, either use:\nusername + password sshkey token nothing, if you only clone public repositories username: user that will be used for the clone process. password: password for said user. ssh: boolean value if the clone should be done via ssh. sshkey: if empty, it uses your home directories' .ssh/id_rsa. exclude: you can exclude repositories. include: only clone those specific repositories. excludeorgs: leave out specific organizations of the user. includeorgs: only clone those specific organizations repositories. wiki: also clone the wikis of the repositories. starred: also clone the starred repositories of the user. filter: lastactivity: only repos that were active in this time frame are cloned (y, M, d, h, m, s) stars: clone repos with at least x stars excludearchived: do not clone archived repos excludeforks: do not clone forked repos languages: only clone repos of said languages ","link":"https://cooperspencer.github.io/gickup-documentation/docs/configuration/source/gitea/","section":"docs","title":"Gitea"},{"body":" 1 gitea: 2 - token: some-token 3 token_file: token.txt 4 url: http(s)://url-to-gogs 5 user: some-user 6 username: your-user 7 password: your-password 8 ssh: true 9 sshkey: /path/to/key 10 exclude: # this excludes the repos \u0026#34;foo\u0026#34; and \u0026#34;bar\u0026#34; 11 - foo 12 - bar 13 include: # this includes the repo \u0026#34;foobar\u0026#34; 14 - foobar 15 excludeorgs: # this excludes repos from the organizations \u0026#34;foo\u0026#34; and \u0026#34;bar\u0026#34; 16 - foo 17 - bar 18 includeorgs: # this includes repos from the organizations \u0026#34;foo1\u0026#34; and \u0026#34;bar1\u0026#34; 19 - foo1 20 - bar1 21 wiki: true 22 filter: 23 lastactivity: 1y 24 stars: 100 25 excludeforks: true token: your gogs token. You don't need one, if you backup only public repositories. It can also be an environment variable. token_file: alternatively, specify the token in a file, relative to current working directory when executed. url: there is no default value. user: the user you want to clone the repositories from. if you want to get everything from your user, leave out the user parameter and just use the token. for the clone process, either use:\nusername + password sshkey token nothing, if you only clone public repositories username: user that will be used for the clone process. password: password for said user. ssh: boolean value if the clone should be done via ssh. sshkey: if empty, it uses your home directories' .ssh/id_rsa. exclude: you can exclude repositories. include: only clone those specific repositories. excludeorgs: leave out specific organizations of the user. includeorgs: only clone those specific organizations repositories. wiki: also clone the wikis of the repositories. filter: lastactivity: only repos that were active in this time frame are cloned (y, M, d, h, m, s) stars: clone repos with at least x stars. excludeforks: do not clone forked repos ","link":"https://cooperspencer.github.io/gickup-documentation/docs/configuration/source/gogs/","section":"docs","title":"Gogs"},{"body":" 1 gitlab: 2 - token: some-token 3 token_file: token.txt 4 url: http(s)://url-to-gitlab 5 user: some-user 6 username: your-user 7 password: your-password 8 ssh: true 9 sshkey: /path/to/key 10 exclude: # this excludes the repos \u0026#34;foo\u0026#34; and \u0026#34;bar\u0026#34; 11 - foo 12 - bar 13 include: # this includes the repo \u0026#34;foobar\u0026#34; 14 - foobar 15 excludeorgs: # this excludes repos from the organizations \u0026#34;foo\u0026#34; and \u0026#34;bar\u0026#34; 16 - foo 17 - bar 18 includeorgs: # this includes repos from the organizations \u0026#34;foo1\u0026#34; and \u0026#34;bar1\u0026#34; 19 - foo1 20 - bar1 21 wiki: true 22 filter: 23 lastactivity: 1y 24 stars: 100 25 excludearchived: true 26 excludeforks: true 27 languages: 28 - go 29 - whatever token: your gitlab token. You don't need one, if you backup only public repositories. It can also be an environment variable. token_file: alternatively, specify the token in a file, relative to current working directory when executed. url: if empty, https://gitlab.com is used. user: the user you want to clone the repositories from. if you want to get everything from your user, leave out the user parameter and just use the token. for the clone process, either use:\nusername + password sshkey token nothing, if you only clone public repositories username: user that will be used for the clone process. password: password for said user. ssh: boolean value if the clone should be done via ssh. sshkey: if empty, it uses your home directories' .ssh/id_rsa. exclude: you can exclude repositories. include: only clone those specific repositories. excludeorgs: leave out specific organizations of the user. includeorgs: only clone those specific organizations repositories. wiki: also clone the wikis of the repositories. starred: also clone the starred repositories of the user. filter: lastactivity: only repos that were active in this time frame are cloned (y, M, d, h, m, s) stars: clone repos with at least x stars. excludearchived: do not clone archived repos. excludeforks: do not clone forked repos languages: only clone repos of said languages. ","link":"https://cooperspencer.github.io/gickup-documentation/docs/configuration/source/gitlab/","section":"docs","title":"Gitlab"},{"body":" 1 bitbucket: 2 - url: http(s)://url-to-bitbucket 3 user: some-user 4 username: your-user 5 password: your-password 6 ssh: true 7 sshkey: /path/to/key 8 exclude: # this excludes the repos \u0026#34;foo\u0026#34; and \u0026#34;bar\u0026#34; 9 - foo 10 - bar 11 include: # this includes the repo \u0026#34;foobar\u0026#34; 12 - foobar 13 filter: 14 lastactivity: 1y url: if empty, https://bitbucket.org is used. user: the user you want to clone the repositories from. if you want to get everything from your user, leave out the user parameter and just use the token. for the clone process, either use:\nusername + password sshkey nothing, if you only clone public repositories username: user that will be used for the clone process. password: password for said user. ssh: boolean value if the clone should be done via ssh. sshkey: if empty, it uses your home directories' .ssh/id_rsa. exclude: you can exclude repositories. include: only clone those specific repositories. filter: lastactivity: only repos that were active in this time frame are cloned (y, M, d, h, m, s) ","link":"https://cooperspencer.github.io/gickup-documentation/docs/configuration/source/bitbucket/","section":"docs","title":"Bitbucket"},{"body":" 1 onedev: 2 - token: some-token 3 token_file: token.txt 4 url: http(s)://url-to-onedev 5 user: some-user 6 username: your-user 7 password: your-password 8 ssh: true 9 sshkey: /path/to/key 10 exclude: # this excludes the repos \u0026#34;foo\u0026#34; and \u0026#34;bar\u0026#34; 11 - foo 12 - bar 13 include: # this includes the repo \u0026#34;foobar\u0026#34; 14 - foobar 15 excludeorgs: # this excludes repos from the organizations \u0026#34;foo\u0026#34; and \u0026#34;bar\u0026#34; 16 - foo 17 - bar 18 includeorgs: # this includes repos from the organizations \u0026#34;foo1\u0026#34; and \u0026#34;bar1\u0026#34; 19 - foo1 20 - bar1 21 filter: 22 lastactivity: 1y 23 excludeforks: true token: your onedev token. You don't need one, if you backup only public repositories. It can also be an environment variable. token_file: alternatively, specify the token in a file, relative to current working directory when executed. url: if empty, https://code.onedev.io is used. user: the user you want to clone the repositories from. if you want to get everything from your user, leave out the user parameter and just use the token. for the clone process, either use:\nusername + password sshkey nothing, if you only clone public repositories username: user that will be used for the clone process. password: password for said user. ssh: boolean value if the clone should be done via ssh. sshkey: if empty, it uses your home directories' .ssh/id_rsa. exclude: you can exclude repositories. include: only clone those specific repositories. excludeorgs: leave out specific organizations of the user. includeorgs: only clone those specific organizations repositories. filter: lastactivity: only repos that were active in this time frame are cloned (y, M, d, h, m, s) excludeforks: do not clone forked repos ","link":"https://cooperspencer.github.io/gickup-documentation/docs/configuration/source/onedev/","section":"docs","title":"Onedev"},{"body":" 1 sourcehut: 2 - token: some-token 3 token_file: token.txt 4 url: http(s)://url-to-sourcehut 5 user: some-user 6 username: your-user 7 password: your-password 8 ssh: true 9 sshkey: /path/to/key 10 exclude: # this excludes the repos \u0026#34;foo\u0026#34; and \u0026#34;bar\u0026#34; 11 - foo 12 - bar 13 include: # this includes the repo \u0026#34;foobar\u0026#34; 14 - foobar 15 excludeorgs: # this excludes repos from the organizations \u0026#34;foo\u0026#34; and \u0026#34;bar\u0026#34; 16 - foo 17 - bar 18 includeorgs: # this includes repos from the organizations \u0026#34;foo1\u0026#34; and \u0026#34;bar1\u0026#34; 19 - foo1 20 - bar1 21 wiki: true 22 filter: 23 lastactivity: 1y token: your onedev token. You don't need one, if you backup only public repositories. It can also be an environment variable. token_file: alternatively, specify the token in a file, relative to current working directory when executed. url: if empty, https://git.sr.ht is used. user: the user you want to clone the repositories from. if you want to get everything from your user, leave out the user parameter and just use the token. for the clone process, either use:\nusername + password sshkey nothing, if you only clone public repositories username: user that will be used for the clone process. password: password for said user. ssh: boolean value if the clone should be done via ssh. sshkey: if empty, it uses your home directories' .ssh/id_rsa. exclude: you can exclude repositories. include: only clone those specific repositories. excludeorgs: leave out specific organizations of the user. includeorgs: only clone those specific organizations repositories. wiki: also clone the wikis of the repositories. filter: lastactivity: only repos that were active in this time frame are cloned (y, M, d, h, m, s) ","link":"https://cooperspencer.github.io/gickup-documentation/docs/configuration/source/sourcehut/","section":"docs","title":"Sourcehut"},{"body":"1 any: 2 - token: some-token 3 token_file: token.txt 4 url: url-to-any-repo 5 username: your-user 6 password: your-password 7 ssh: true 8 sshkey: /path/to/key 9 - url: can-also-be-a-local-path-to-a-bare-repo token: Token of the hoster. It can also be an environment variable. token_file: alternatively, specify the token in a file, relative to current working directory when executed. url: can be https, http or ssh. Could also be a local bare repository username: user that will be used for the clone process. password: password for said user. ssh: boolean value if the clone should be done via ssh. sshkey: if empty, it uses your home directories' .ssh/id_rsa. ","link":"https://cooperspencer.github.io/gickup-documentation/docs/configuration/source/any/","section":"docs","title":"Any"},{"body":"Gickup supports various code hosters to mirror repositories:\nGitea Gogs Gitlab (only with an Enterprise License) Or clone them locally and keep them up-to-date.\nGitea ","link":"https://cooperspencer.github.io/gickup-documentation/docs/configuration/destination/","section":"docs","title":"Destination"},{"body":" 1 gitea: 2 - token: some-token 3 token_file: token.txt 4 user: some-name 5 url: http(s)://url-to-gitea 6 createorg: true 7 lfs: true 8 mirrorinterval: 1h 9 visibility: 10 repositories: private 11 organizations: private token: your gitea token. token_file: alternatively, specify the token in a file, relative to current working directory when executed. url: if empty, https://gitea.com is used. user: the user/org you want to mirror the repositories to. createorg: if activated, it will create the value in user as organization if it doesn't exist on the system. lfs: enable lfs on the mirror repository. mirrorinterval: resync interval for gitea. if user is empty and createorg is set to true, it creates organizations based on the original author. visibility: set the visibility of created organizations and repositories repositories: can be private or public, default is private organizations: can be private, limited or public, default is private ","link":"https://cooperspencer.github.io/gickup-documentation/docs/configuration/destination/gitea/","section":"docs","title":"Gitea"},{"body":"1 gogs: 2 - token: some-token 3 token_file: token.txt 4 user: some-name 5 url: http(s)://url-to-gogs 6 createorg: true 7 visibility: 8 repositories: private token: your gogs token. token_file: alternatively, specify the token in a file, relative to current working directory when executed. url: there is no default value. user: the user/org you want to mirror the repositories to. createorg: if activated, it will create the value in user as organization if it doesn't exist on the system. if user is empty and createorg is set to true, it creates organizations based on the original author. visibility: set the visibility of created repositories repositories: can be private or public, default is private ","link":"https://cooperspencer.github.io/gickup-documentation/docs/configuration/destination/gogs/","section":"docs","title":"Gogs"},{"body":"1 gitlab: 2 - token: some-token 3 token_file: token.txt 4 url: http(s)://url-to-gitlab token: your gitlab token. token_file: alternatively, specify the token in a file, relative to current working directory when executed. url: if empty, https://gitlab.com is used. A backup to Gitlab works in general. With the community edition, it just migrates the repository to Gitlab. Mirroring is only supported in the Enterprise Edition. I have no access to an Enterprise Edition, therefore I can't test it properly. ","link":"https://cooperspencer.github.io/gickup-documentation/docs/configuration/destination/gitlab/","section":"docs","title":"Gitlab"},{"body":"1 github: 2 - token: some-token 3 token_file: token.txt 4 organization: myorg 5 force: true 6 visibility: 7 repositories: private token: your github token. token_file: alternatively, specify the token in a file, relative to current working directory when executed. organization: name of the organization you want to backup to. force: enable force push. visibility: set the visibility of created organizations and repositories. repositories: can be private or public, default is private. ","link":"https://cooperspencer.github.io/gickup-documentation/docs/configuration/destination/github/","section":"docs","title":"Github"},{"body":"1 sourcehut: 2 - token: some-token 3 token_file: token.txt 4 url: http(s)://url-to-sourcehut 5 sshkey: /path/to/key 6 force: true 7 visibility: 8 repositories: private token: your github token. token_file: alternatively, specify the token in a file, relative to current working directory when executed. url: if empty, https://git.sr.ht is used. Sourcehut uses SSH to manage write access for repositories, so you need to employ an SSH key to mirror a repository. sshkey: if empty, it uses your home directories' .ssh/id_rsa. force: enable force push. visibility: set the visibility of created organizations and repositories repositories: can be private or public, default is private ","link":"https://cooperspencer.github.io/gickup-documentation/docs/configuration/destination/sourcehut/","section":"docs","title":"Sourcehut"},{"body":"1 onedev: 2 - token: some-token 3 token_file: token.txt 4 url: http(s)://url-to-onedev 5 organization: myorg 6 force: true token: your onedev token. token_file: alternatively, specify the token in a file, relative to current working directory when executed. url: if empty, https://code.onedev.io is used. organization: name of the parent repository you want to backup to. force: enable force push. ","link":"https://cooperspencer.github.io/gickup-documentation/docs/configuration/destination/onedev/","section":"docs","title":"Onedev"},{"body":"There are additional options to set.\n1cron: 0 22 * * * 2 3log: 4 timeformat: 2006-01-02 15:04:05 5 file-logging: 6 dir: log 7 file: gickup.log 8 maxage: 7 9 10metrics: 11 prometheus: 12 endpoint: /metrics 13 listen_addr: \u0026#34;:6178\u0026#34; 14 heartbeat: 15 urls: 16 - http(s)://url-to-make-request-to 17 - http(s)://another-url-to-make-request-to 18 push: 19 ntfy: 20 - url: http(s)://url-to-ntfy/your-topic 21 token: your-token 22 user: your-user 23 password: your-password 24 gotify: 25 - url: http(s)://url-to-gotify 26 token: your-token cron: you can add a cron expression to run gickup more than once. You can create and test the expression on https://crontab.guru/. If gickup runs in Docker, you might want to set the timezone for your container. log: this is everything related to logging. timeformat: set it to a different time format for logging. The basics for time formats can be found at https://yourbasic.org/golang/format-parse-string-time-date-example/. This can also be set as an environment variable with GICKUP_TIME_FORMAT. file-logging: logs can also be stored in a file. dir: where to store your log. file: in which file to store your log. maxage: automatically cleanup files older than X days. metrics: everything related to metrics. prometheus: enable prometheus metrics. endpoint: by default it is /metrics, but set it to whatever you prefer. listen_addr: by default it listens on :6178. heartbeat: send GET requests to monitoring services like https://healthchecks.io/ or https://deadmanssnitch.com/. urls: list of urls. push: you can configure pushgateways to get notifications on your phone/browser ntfy: ntfy. a list with the following parameters url: url to your ntfy token: token of ntfy, can be an environment variable user: your ntfy user password: your ntfly password if token is set, user and password are not used. gotify: gotify. a list with the following parameters url: url to your gotify token: token of gotify, can be an environment variable ","link":"https://cooperspencer.github.io/gickup-documentation/docs/configuration/miscellaneous/","section":"docs","title":"Miscellaneous"},{"body":"1 local: 2 - path: /some/path/gickup 3 structured: true 4 zip: true 5 keep: 5 6 bare: true path: path to store your backup If you use Docker, don't forget to mount the path of your backup! structured: if set to true, it checks out the repos in a more structured way, like hoster/user|organization/repository zip: zips the repository keep: keeps x latest backups bare: clones it as bare ","link":"https://cooperspencer.github.io/gickup-documentation/docs/configuration/destination/local/","section":"docs","title":"Local"},{"body":"Backup all your repositories with Ease. Gickup is written in go.\nIt is not necessary to have git installed on your system. You can backup all your or favorite repositories from:\nGithub Gitea Gogs Gitlab Onedev Sourcehut Or basically everywhere with enough configuration.\nFeel free to contribute over at Github. Read the DocsLatest Release\n","link":"https://cooperspencer.github.io/gickup-documentation/","section":"","title":"Gickup"}]